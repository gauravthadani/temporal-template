/*
 * This source file was generated by the Gradle 'init' task
 */
package com.example.hangingtest

import io.temporal.api.common.v1.WorkflowExecution
import io.temporal.client.WorkflowClient
import io.temporal.client.WorkflowOptions
import io.temporal.serviceclient.WorkflowServiceStubs
import io.temporal.worker.WorkerFactory
import java.util.*


const val TASK_QUEUE = "HelloActivityTaskQueue"
const val WORKFLOW_ID = "HelloActivityWorkflow"

class App(private val client: WorkflowClient) {

    private val workflow
        get() = WorkflowOptions.newBuilder()
            .setWorkflowId("WORKFLOW_ID_${UUID.randomUUID()}")
            .setTaskQueue(TASK_QUEUE)
            .build().let { wo ->
                client.newWorkflowStub(
                    GreetingWorkflow::class.java, wo
                )
            }

    fun spawn(arg: String): WorkflowExecution {
        return WorkflowClient.start(workflow::greeting, arg)
    }

    fun getResult(handle: WorkflowExecution): String {
        return client.newUntypedWorkflowStub(handle.workflowId).getResult(String::class.java)
    }
}

fun main() {

    val client = WorkflowClient.newInstance(WorkflowServiceStubs.newLocalServiceStubs())
    val factory =
        WorkerFactory.newInstance(client).also { factory ->
            factory.newWorker(TASK_QUEUE).apply {
                registerWorkflowImplementationTypes(GreetingWorkflowImpl::class.java)
                registerActivitiesImplementations(GreetingActivitiesImpl())
            }
        }


    factory.start()
    val app = App(client)
    val wf = app.spawn("Thadani")
    val wf2 = app.spawn("Lewis")
    val wf3 = app.spawn("Verstappen")


//    Promise.allOf(wf, wf2, wf3)
//    exitProcess(0)
}




