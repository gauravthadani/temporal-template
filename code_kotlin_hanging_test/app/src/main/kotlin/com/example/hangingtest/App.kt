/*
 * This source file was generated by the Gradle 'init' task
 */
package com.example.hangingtest

import io.temporal.api.common.v1.WorkflowExecution
import io.temporal.client.WorkflowClient
import io.temporal.client.WorkflowClientOptions
import io.temporal.client.WorkflowOptions
import io.temporal.serviceclient.WorkflowServiceStubs
import io.temporal.serviceclient.WorkflowServiceStubsOptions
import java.util.*


const val TASK_QUEUE = "HelloActivityTaskQueue"

class App(private val client: WorkflowClient) {

    private val workflow
        get() = WorkflowOptions.newBuilder()
            .setWorkflowId("WORKFLOW_ID_${UUID.randomUUID()}")
            .setTaskQueue(TASK_QUEUE)
            .build().let { wo ->
                client.newWorkflowStub(
                    GreetingWorkflow::class.java, wo
                )
            }

    fun spawn(arg: String): WorkflowExecution {
        return WorkflowClient.start(workflow::greeting, arg)
    }

    fun getResult(handle: WorkflowExecution): String {
        return client.newUntypedWorkflowStub(handle.workflowId).getResult(String::class.java)
    }
}

fun main() {

    val newServiceStubs = WorkflowServiceStubs.newServiceStubs(
        WorkflowServiceStubsOptions {
            addApiKey {
                "add api key here"
            }
            setEnableHttps(true)
            setTarget("us-east-1.aws.api.temporal.io:7233")
        }
    )
    val client = WorkflowClient.newInstance(newServiceStubs, WorkflowClientOptions {
        setNamespace("gaurav-test.a2dd6")
    })
    val app = App(client)

    while (true){

        val arg = "Thadani  ${UUID.randomUUID()}"
        val wf = app.spawn(arg)

        println("Created ${arg}")
        Thread.sleep(15000)
    }


//    Promise.allOf(wf, wf2, wf3)
//    exitProcess(0)
}




